{# src/Cairn/UserBundle/Resources/views/User/change_sms_data.html.twig #} 
                                                                               
{% extends "CairnUserBundle::layout.html.twig" %}                        
                                                                               
{% form_theme formSmsData 'form/materialize_form_theme.html.twig' %}

{% block title %}{% endblock %}                                                                 
                                                                               
{%block stylesheets %}
{% endblock %}

{% block body %}
    {{parent()}} 

<div class="row">
    <div class="container">
        <h2>Les notifications de paiement SMS</h2>

    {{ form_start(formSmsData) }}

        <table class="highlight">
            <caption><b>Méthodes de notification</b></caption>
            <tbody>
              <tr id="webpush_option">
                <td>Notification sur <b>ce navigateur</b> </td>
                <td>
                    <p>
                    <label>
                      {{ form_widget(formSmsData.notificationPermission.webPushEnabled) }}                                         
                      <span></span>
                    </label>
                    </p>
                </td>
              </tr>
              <tr>
                <td>Email à <b>{{app.user.email}}</b> </td>
                <td>
                    <p>
                    <label>
                      {{ form_widget(formSmsData.notificationPermission.emailEnabled) }}                                         
                      <span></span>
                    </label>
                    </p>
                </td>
              </tr>
              <tr>
                <td>SMS</td>
                <td>
                    <p>
                    <label>
                      {{ form_widget(formSmsData.notificationPermission.smsEnabled) }}                                         
                       <span></span>
                   </label>
                    </p>
                </td>
              </tr>
            </tbody>
        </table>
    
    </div> 
        {% for form in formSmsData.phones %}
            {% if form.phoneNumber is defined %}
            <div class="input-field col s12 m6">
               {{ form_widget(form.phoneNumber) }} 
               {{ form_label(form.phoneNumber) }} 
            </div>                                        
            {% endif %}
        
            {% if form.identifier is defined %}
                <div class="input-field col s12 m6">
                   {{ form_widget(form.identifier) }} 
                   {{ form_label(form.identifier) }} 
                </div>                                        
            {% endif %}
            <p>
               <label>
                 {{ form_widget(form.paymentEnabled) }}                                         
                 <span>Autoriser le paiement par SMS</span>
               </label>
            </p>
        
        {% endfor %}
        
    <br><br>
    {{ form_rest(formSmsData) }}
    {{ form_end(formSmsData) }}
    
    {% if is_granted("IS_AUTHENTICATED_REMEMBERED") %}
        <div class="js-user-name" data-get-name="{{app.user.username}}">
        <div class="js-user-role" data-is-pro="{{app.user.hasRole('ROLE_PRO')}}">
    {% endif %}

</div>
{% endblock %}              

{% block javascripts %}
        <script type="text/javascript">

        function checkNotification() {
            getNotificationPermissionState().then(function(permission) {
                if(Notification.permission !== 'granted'){
                    askPermission().then(function(permission) {
                        if(permission === 'granted'){
                            var containerName = document.querySelector('.js-user-name');
                            var username = containerName.dataset.getName;
                
                            navigator.serviceWorker.register("/service-worker.js", {
                                scope: '/'
                            })
                            .then(function(reg) {
                                navigator.serviceWorker.ready
                                .then(function(reg) {
                                    var subscribeOptions = {
                                        userVisibleOnly: true,
                                        applicationServerKey: urlBase64ToUint8Array(
                                                'BO9K_IB1z_5V01itri-Zg9j_K91rqScOuDO8YImfDioxTZSswSAmanSkX25QeU4THYqSA8naQ68EEMJWJS1pg-Y'
                                        )
                                    };
                                    console.log(reg.pushManager);
                                    return reg.pushManager.subscribe(subscribeOptions);
                                })
                                .then(function(subscription) {
                                    sendSubscriptionToBackEnd(subscription, username);
                                })
                                .catch(function(err) {
                                    console.error('Unable to register service worker 2.', err);
                                });

                            })
                            .catch(function(err) {
                                throw new Error(err);
                            });

                        }
                    });
                }
            });
        }


        function urlBase64ToUint8Array(base64String) {
            var padding = '='.repeat((4 - base64String.length % 4) % 4);
            var base64 = (base64String + padding)
                .replace(/\-/g, '+')
                .replace(/_/g, '/');
        
            var rawData = window.atob(base64);
            var outputArray = new Uint8Array(rawData.length);
        
            for (var i = 0; i < rawData.length; ++i) {
                outputArray[i] = rawData.charCodeAt(i);
            }
            return outputArray;
        }

        function registerServiceWorker() {
        }

        function askPermission() {
            return new Promise(function(resolve, reject) {
                    const permissionResult = Notification.requestPermission(function(result) {
                            resolve(result);
                            });
        
                    if (permissionResult) {
                        permissionResult.then(resolve, reject);
                    }
             })
            .then(function(permissionResult) {
                    return permissionResult;
             });
        }

        function getNotificationPermissionState() {
            if (navigator.permissions) {
                return navigator.permissions.query({name: 'notifications'})
                    .then(function(result) {
                            return result.state;
                            });
            }
        
            return new Promise(function(resolve) {
                    resolve(Notification.permission);
                    });
        }

        
        function sendSubscriptionToBackEnd(subscription,username) {
            return fetch(self.location.protocol +"//" + self.location.host + '/webpush/subscription', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'charset': 'UTF-8'
                        },
                        body: JSON.stringify({'username': username,
                                              'subscription': subscription})
                   })
        .then(function(response) {
                if (!response.ok) {
                throw new Error('Bad status code from server.');
                }
        
                return response;
                });
        }

        function onIncompatibleBrowser(){
            var containerNotifInput = document.querySelector('input#cairn_userbundle_smsdata_notificationPermission_webPushEnabled');
            containerNotifInput.disabled = true;

            var containerNotifRow = document.querySelector('tr#webpush_option');

            containerNotifRow.addEventListener('click', function() {
               M.toast({html: 'Votre navigateur est incompatible avec cette fonctionnalité', displayLength: 5000});
            });
        }

        //all functions have been defined
        var containerRole = document.querySelector('.js-user-role');
        var isPro = containerRole.dataset.isPro;

        if( isPro ){
            if (! ('serviceWorker' in navigator)) {
                // Service Worker isn't supported on this browser, disable or hide UI.
    
                onIncompatibleBrowser();
                throw new Error('Service Worker not supported');
            }
    
            if (!('PushManager' in window)) {
                // Push isn't supported on this browser, disable or hide UI.
    
                onIncompatibleBrowser();
                throw new Error('push manager not supported');
            }            

            var containerNotifBox = document.querySelector('#cairn_userbundle_smsdata_notificationPermission_webPushEnabled');
            if(Notification.permission !== 'granted'){
                containerNotifBox.checked = false;
            }           

            if(containerNotifBox){ 
                if(containerNotifBox.checked){
                    checkNotification();
                }

                containerNotifBox.addEventListener('change', function() {
                    if(this.checked){
                        checkNotification();
                    }
                });
            }
        }



        </script>

{% endblock %}


