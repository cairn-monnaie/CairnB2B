{# src/Cairn/UserBundle/Resources/views/User/change_sms_data.html.twig #} 
                                                                               
{% extends "CairnUserBundle::layout.html.twig" %}                        
                                                                               
{% block title %}{% endblock %}                                                                 
                                                                               
{%block stylesheets %}
{% endblock %}

{% block body %}
    {{parent()}} 
        <em> Attention </em> Un SMS vous sera envoyé en cas de changement de numéro. Assurez-vous d'être en mesure de le recevoir


 {#   <div class="well">
       {{ form_start(formSmsData) }}
       {{ form_row(formSmsData.smsData) }}

       <a href="#" id="add_smsdata" class="btn btn-default">Ajouter un numéro de téléphone</a> 
       {{ form_rest(formSmsData) }}
       {{ form_end(formSmsData) }}

    </div>
#}
       {{ form_start(formSmsData) }}
         {% if formSmsData.activationCode is defined %}
           {{ form_row(formSmsData.activationCode) }}                                         
         {% else %}
             {% if formSmsData.phoneNumber is defined %}
                {{ form_row(formSmsData.phoneNumber) }}                                         
             {% endif %}
             {{ form_row(formSmsData.smsEnabled) }}                                         
             {% if formSmsData.paymentEnabled is defined %}
                {{ form_row(formSmsData.paymentEnabled) }}                                         
             {% endif %}
             {% if formSmsData.identifier is defined %}
                {{ form_row(formSmsData.identifier) }}                                         
             {% endif %}
         {% endif %}

       {{ form_row(formSmsData.save) }}  
       {{ form_rest(formSmsData) }}
       {{ form_end(formSmsData) }}

        {% if is_granted("IS_AUTHENTICATED_REMEMBERED") %}
            <div class="js-user-name" data-get-name="{{app.user.username}}">
            <div class="js-user-role" data-is-pro="{{app.user.hasRole('ROLE_PRO')}}">
        {% endif %}

{% endblock %}              

{% block javascripts %}

        <script type="text/javascript">
        if (!('serviceWorker' in navigator)) {
            // Service Worker isn't supported on this browser, disable or hide UI.
            throw new Error('Service Worker not supported');
        }

        if (!('PushManager' in window)) {
            // Push isn't supported on this browser, disable or hide UI.
            throw new Error('push manager not supported');
        }            

        //if granted, subscribe user

        var containerRole = document.querySelector('.js-user-role');
        var isPro = containerRole.dataset.isPro;

        if( isPro ){
            getNotificationPermissionState().then(function(permission) {
                if(Notification.permission !== 'granted'){
                    askPermission().then(function(permission) {
                        if(Notification.permission === 'granted'){
                            var containerName = document.querySelector('.js-user-name');
                            var username = containerName.dataset.getName;
                
                            subscribeUserToPush().then(function(subscription) {
                                sendSubscriptionToBackEnd(subscription, username);
                            });
                        }
                    });
                }
            });
        }

        function urlBase64ToUint8Array(base64String) {
            var padding = '='.repeat((4 - base64String.length % 4) % 4);
            var base64 = (base64String + padding)
                .replace(/\-/g, '+')
                .replace(/_/g, '/');
        
            var rawData = window.atob(base64);
            var outputArray = new Uint8Array(rawData.length);
        
            for (var i = 0; i < rawData.length; ++i) {
                outputArray[i] = rawData.charCodeAt(i);
            }
            return outputArray;
        }

        function registerServiceWorker() {
            return navigator.serviceWorker.register("{{ asset('bundles/cairnuser/js/service-worker.js') }}")
                .then(function(registration) {
                        return registration;
                    })
                .catch(function(err) {
                        console.error('Unable to register service worker.', err);
                    });
        }

        function askPermission() {
            return new Promise(function(resolve, reject) {
                    const permissionResult = Notification.requestPermission(function(result) {
                            resolve(result);
                            });
        
                    if (permissionResult) {
                        permissionResult.then(resolve, reject);
                    }
             })
            .then(function(permissionResult) {
                    return permissionResult;
             });
        }

        function getNotificationPermissionState() {
            if (navigator.permissions) {
                return navigator.permissions.query({name: 'notifications'})
                    .then((result) => {
                            return result.state;
                            });
            }
        
            return new Promise((resolve) => {
                    resolve(Notification.permission);
                    });
        }

        function subscribeUserToPush() {
            return registerServiceWorker()
                .then(function(registration) {
                        const subscribeOptions = {
                            userVisibleOnly: true,
                            applicationServerKey: urlBase64ToUint8Array(
                                    'BOgWoZItNVvw2sWwfQ8AammEU-bjTNyHtoFuJF6yk9llulIclOEFQzbvf3PCFRZqRltLVHrVomu1Vmb-YYf0JAA'
                            )
                        };
                        return registration.pushManager.subscribe(subscribeOptions);

        })
        .then(function(pushSubscription) {
                console.log('Received PushSubscription: ', JSON.stringify(pushSubscription));
                return pushSubscription;
                });
        }
        
        function sendSubscriptionToBackEnd(subscription,username) {
            var token = "{{app.session.get('cyclos_token')}}";
            return fetch('api/notifications/endpoint-subscription', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'charset': 'UTF-8'
                        },
                        body: JSON.stringify({'username': username,
                                              'token': token,
                                              'subscription': subscription})
                   })
        .then(function(response) {
                if (!response.ok) {
                throw new Error('Bad status code from server.');
                }
        
                return response;
                });
        }
        </script>

{% endblock %}


