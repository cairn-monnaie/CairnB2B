<?php

namespace Cairn\UserBundle\Repository;

use Cairn\UserBundle\Entity\User;

use Doctrine\ORM\QueryBuilder;

/**
 * OperationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OperationRepository extends \Doctrine\ORM\EntityRepository
{

    public function whereKeywords(QueryBuilder $ob, $keywords)
    {
        $keywords = preg_split('/\s+/',$keywords);         
        //separate keywords into list of words                         
        for($i = 0 ; $i < count($keywords) ; $i++){                    
            $ob->andWhere($ob->expr()->orX(                            
                $ob->expr()->like('o.reason', '?'.$i),                 
                $ob->expr()->like('o.description', '?'.$i)             
            ))                                                         
            ->setParameter($i ,'%'.$keywords[$i].'%');                 
        }

        return $this;
    }

    public function whereType(QueryBuilder $ob, $type)
    {
        $ob->andWhere('o.type = :type')                                           
            ->setParameter('type',$type);
        return $this;
    }

    public function whereTypes(QueryBuilder $ob, $arrayTypes)
    {
        $ob->andWhere(
            $ob->expr()->in('o.type',$arrayTypes)
        );

        return $this;
    }

    //TODO : rajouter la recherche par accountNumber ici : 
    //si un utilisateur est supprimé, la requête par userID va fail 
    public function whereDebitor(QueryBuilder $ob, User $user)
    {
        $ob->andWhere('o.debitor = :debitor')                                           
            ->setParameter('debitor',$user);
        return $this;
    }

    public function whereDebitorAccountNumber(QueryBuilder $ob, $accountNumber)
    {
        $ob->andWhere('o.fromAccountNumber = :fromNumber')                                           
            ->setParameter('fromNumber',$accountNumber);
        return $this;
    }

    public function whereCreditor(QueryBuilder $ob, User $user)
    {
        $ob->andWhere('o.creditor = :creditor')                                           
            ->setParameter('creditor',$user);
        return $this;
    }

    public function whereCreditorAccountNumber(QueryBuilder $ob, $accountNumber)
    {
        $ob->andWhere('o.toAccountNumber = :toNumber')                                           
            ->setParameter('toNumber',$accountNumber);
        return $this;
    }

    public function whereInvolvedAccountNumber(QueryBuilder $ob, $accountNumber)
    {
        $ob->andWhere(
            $ob->expr()->orX(
                'o.fromAccountNumber = :number',
                'o.toAccountNumber = :number'
        ))
        ->setParameter('number', $accountNumber);

        return $this;
    }

    public function whereAmountComparedWith(QueryBuilder $ob, $amount, $operator)
    {
        switch ($operator){
            case 'gt':
                $ob->andWhere('o.amount >= :amount');
                break;
            case 'lt':
                $ob->andWhere('o.amount <= :amount');
                break;
            case 'eq':
                $ob->andWhere('o.amount = :amount');
                break;
            default:
                throw new \Exception('Undefined comparison operator');
        }

        $ob->setParameter('amount',$amount);
        return $this;

    }

    public function countTotalAmount(QueryBuilder $ob)
    {
        return $ob->select('SUM(o.amount) as totalAmount')
               ->getQuery()
               ->getSingleScalarResult();
    }

    public function whereCurrentDay(QueryBuilder $ob)
    {
        $ob->andWhere('o.executionDate BETWEEN :start AND :end')
            ->setParameter('start', new \Datetime(date('Y-m-d'))) // 00:00:00
            ->setParameter('end', new \Datetime()) //now
            ;
        return $this;

    }

    public function whereExecutedBefore(QueryBuilder $ob, $before){
        $ob->andWhere('o.executionDate < :before')
            ->setParameter('before',$before);

        return $this;
    }

    public function whereExecutedAfter(QueryBuilder $ob, $after){
        $ob->andWhere('o.executionDate > :after')
            ->setParameter('after',$after);

        return $this;
    }

    public function whereSubmissionDateBetween(QueryBuilder $ob, \Datetime $begin, \Datetime $end)
    {
        $ob->andWhere('o.submissionDate BETWEEN :start AND :end')
            ->setParameter('start', $begin)
            ->setParameter('end', $end) 
            ;
        return $this;


    }

}
