1) Basic network information
        *nom : '%cyclos_network_cairn%' in app/config/parameters.yml

2) Localization : 
        *click next
3) Administrator :
    *create a network administrator : uncheck
    *click next

4) Currency
    *fill with the parameter '%cyclos_currency_cairn%' in app/config/parameters.yml
    *click next 

5) System accounts
    *unlimited account : check and fill name
    *system account : fill
    *additional system account : uncheck
    *click next

6) User account
    *default negative balance limit : even if 0 is written, refill it with 0
    *click next

7) Brokers
    *click next

8) Profile fields
    *click next 

9) References 
    *click next 

10) Records
    *click next 

11) Message categories
    *click next 

12) Advertisments
    *click next 

13) Network details 
    *enabled : check
    *click "switch to this network"

14) Configure the currency to suit application
    .Access : System / Account Configuration / Currencies
    *click on the created currency
    *decimal places : 2
    *enable transfer number : check
    *transfer number identifier length : 7
    *WARNING : NO prefix/suffix !
    *click save

15) Configure network administrators' permissions
    .Access : System / User configuration / Groups / Network Administrators 
    *fill name with value of '%cyclos_group_network_admins%' dans app/config/parameters.yml
    *click save
    *click Permissions(top-right tab)
    *General / My profile fields : enabled/registration/visible/editable : check for full name / login name / email
    *user channels access : select "manage"
    *User management / user registration : check
    *System Accounts : 
        _system accounts : select all
        _system to system payments : select all
        _system to user payments : select all

        _system recurring payments --> select view + cancel
        _system scheduled payments --> select view + cancel + block + unblock + process installment + settle installment
    *User Accounts : 
        _access user accounts : select created user account
        _payments as user to user : select all
        _payments as user to system : select all
        _recurring payments : select view + cancel
        _scheduled payments : select  view + cancel + block + unblock + process installment + settle installment
    *click save

16) Configure existing transfer types from each account type. Let's consider $fromAccountType =  $userAccountType
    .Access : System/ Account Configuration/Account Types/ $fromAccount / Transfer types
    *click on first transfer type
    *enabled : check
    *channels : select main Web / web services / mobile app
    *allows recurring payments : check
    *allows scheduled payments : check
    *max installments on scheduled payments : 1
    *click save
    *repeat all previous steps for the second and third transfer types(to system account types)

    *repeat all previous steps for $fromAccountType = $systemAccountType (limited system account type)
    *repeat all previous steps for $fromAccountType = $debitAccountType (unlimited system account type)
   

17) Configure group of members
    .Access : System / User configuration / Groups
    *click on group "Users"(only member group)
    *enabled : check
    *Name : fill with parameter '%cyclos_group_pros%' dans app/config/parameters.yml
    *click save

18) Configure the Product associated with user Account Type
    .Access : System / User Configuration / Products
    *click on the only product entity (Members)
    *name : fill with exact same name than user account type's name 
    *internal name : fill with exact same name than user account type's internal name
    *Accounts / User account : name must be user account type's name
    *Accounts / Default negative balance limit :  refill with 0
    *Accounts / system payments : select all
    *Accounts / user payments : select all
    *Accounts / recurring payments : select view + cancel
    *Accounts / scheduled payments : select  view + cancel + block + unblock + process installment + settle installment
    *click save

19)Check product's assignation to Member group
    .Access : System / User configuration / Groups
    *click on Member's group
    *click on Products(top right tab)
    *check that the created product appears in "Products assigned to Group" table

20) Configure global administration
    .Access : Switch to global administration (top-side on the screen)
    .Access : System configuration / Configurations / Global default
    *click on channels (top-right )
    *click on web services
    *enabled : check
    *user access : enabled by default
    *session timeout : 2 minutes

21)Change password type length
     .Access : Switch to global administration (top-side on the screen)
    .Access : System / User configuration / password types / Login password
    *password length :  8 to 25 
   
We are done with cyclos configuration !

21) Create the dev/prod database
    *sudo php bin/console doctrine:database:create 
    *sudo php bin/console doctrine:schema:update --force
    *in phpmyadmin, access the database, then the table "zip_city"
    *import file web/zipcities.sql

22) On server side, don't forget to create email addresses for
    _'%cairn_email_technical_services%'
    _'%cairn_email_noreply%'

23) create initial administrator
    *request url $ABSOLUTE_ROOT_URL/install. This creates a user on Doctrine's side with login and password defined in app/config/parameters.yml : '%cyclos_global_admin_username%' and '%cyclos_global_admin_password%' respectively
 
24) Access the platform with credentials reminded in 22)


###################### Testing  #########################################
For testing to be fully efficient, we need to control exactly the content of the cyclos testing database initially and at the end of the testing process.
However, handling a cyclos database by hand is far from easy. For this reason, the simplest way to do is to restore the testing database content at each execution of the testing script, requring a backup of the database initial state.

25) Create a fresh cyclos install for testing
    *repeat cyclos install for a testing database (docker commands) :
    WARNING : of course, change the database name, the container name
    WARNING : the port listening to it must match the one defined in '%cyclos_root_test_url%' in app/config/parameters.yml
    WARNING : note the testing database name, we will need it later

26) Access the new cyclos install in your favorite browser, and repeat steps 1) to 20) for initial configuration
27) Configure testing script with your personal settings.
    In files : make-start.sh / make-stop.sh / make-test.sh
        *replace cyclos_dev by your custom dev container database name (provided in docker command)
        *replace cyclos_test by your custom test container database name (provided in docker command)
        *replace cyclos-app by your custom dev app container name (provided in docker command)
        *replace cyclos-test-app by your custom test app container name (provided in docker command)

28) Make a backup of your cyclos testing database configuration $cyclos-test-db and store it in tests directory
    * create an empty file tests/cyclos_test.sql
    * docker exec -i -u postgres cyclos_test pg_dump cyclos > tests/cyclos_test.sql 

29) Open csv files to be imported in the testing database : tests/test_users.csv && test_simple_payments.csv
    * see https://wiki4.cyclos.org/index.php/Imports_quick_steps for explanations on how to set up these files

29) Test the application
    * sudo ./make-test.sh



######################  PLUS TARD #########################################
### créer un transfer fee "à la main" dans cyclos afin de pouvoir le récuperer via les webservices pour en créer d'autres (pas de DataForNew possible et pas d'objet transfer fee par défaut); 
### pour gérer les transferfee : obligation de créer un groupe Pros et un groupe Users
### créer un transfertype de type GENERATED pour les frais de transfert C2B :
###        enabled = true
###         willBeCharged : destination (Business)
###         willReceive   : System
###         generatedTransferType : $this->container->getParameter('cyclos_transfertype_C2B')
###         chargeMode : percentage
###         amount     : xxx
###         fromGroups : $this->container->getParameter('cyclos_group_adherents')
###         toGroups   : $this->container->getParameter('cyclos_group_pros')
### 
### associer un seul Product par accountType de type USER.
### ur trouver un Product :
###  _USER : nom du User AccountType doit être identique
###  _SYSTEM : nom du groupe System (Network Administrators, Account Administrators,  ...) 
### chaque accountType doit avoir au moins un Product
### donner un internalName à tous les Product (par défaut, les Product de type ADMIN n'ont pas de internalName)
###  ajouter nouvel utilisateur : ajouter webServices
###      
###  ajouter descriptions à tous les accountTypes de départ
###  les AdminProduct : gestion des User/Admin Products. Comme c'est le super admin qui effectue toutes les opérations ( setAuthentication('adminuser','adminpass') ) il faut lui donner les droits d'accès sous peine d avoir des PERMISSION_DENIED
### un seul objet TransferFee par TransferType
### modifier le Product Members initial : changer le defaultCreditLimit (mettre à 0 mais sinon l'attribut n est pas disponible par défaut et provoque donc une erreur) 
###  Dans les permissions Network Administrators : autoriser view/cancel/block/unblock... recurring payments && scheduled payments
### 
